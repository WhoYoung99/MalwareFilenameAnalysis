"""
Embed each characters (letters, numbers, spaces, ...) into a 8-bit vector.
"""
import numpy as np

from data_clean import merge_csv


def string_vector(string, clip):
    '''
    Turn each letter in a string into a list of ascii number
    clip: truncate too long string to uniform length,
          if string is shorter than clip number, padded with zeros
    '''
    string_to_int = np.array([ord(i) for i in string.lower()])
    string_to_int.resize(clip)
    return string_to_int

def string_embedding(string, clip=100):
    '''
    Convert each lettter of the string to a 8-bit vector
    Input: string
    Output: 8-bit vector with shape(clip, 8)
    '''
    arr = string_vector(string, clip)
    return np.array([tuple(map(int, tuple('{0:08b}'.format(i)))) for i in arr])

def generate_embedding(dataframe):
    '''
    Return a 3d array with shape (n, 100, 8) for training
    '''
    vsdt = dataframe['File VSDT'].str.replace('[', '').str.replace(']', '')
    vsdt = vsdt.str.split('_', 1).apply(lambda x: x[1].lower())
    filename_concate = vsdt + dataframe['FileFullPath']
    name_vector = filename_concate.apply(lambda x: string_embedding(x, clip=100))
    # name_vector = np.array([i for i in name_vector])
    return name_vector

def embedding(path):
    '''
    main function, return
    1.) label (Y)
    2.) feature vectors (X)
    '''
    dataframe = merge_csv(path)
    name_vector = generate_embedding(dataframe)
    label = dataframe['Malware Result'].astype('category').cat.codes
    return label, name_vector
