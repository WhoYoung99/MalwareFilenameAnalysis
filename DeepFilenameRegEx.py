import os
from os import getcwd
from sklearn.model_selection import train_test_split
from os.path import join
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

def string_vector(string, clip):
    '''
    Turn each letter in a string into a list of ascii number
    clip: truncate too long string to uniform length,
          if string is shorter than clip number, padded with zeros
    '''
    string_to_int = np.array([ord(i) for i in string.lower()])
    string_to_int.resize(clip)
    return string_to_int

def string_embedding(string, clip=100):
    '''
    Input: string
    Output: 8-bit vector with shape(clip, 8)
    '''
    arr = string_vector(string, clip)
    return np.array([tuple(map(int, tuple('{0:08b}'.format(i)))) for i in arr])



folder = 'TotalFileSubmission_YangHu'
path = join(getcwd(), folder)
try:
    fn = 'data.csv'
    df = pd.read_csv(join(path, fn), encoding='ISO-8859-1')
except OSError:
    print('Cannot find file {} in current path'.format(fn))

columns = ['FileFullPath', 'File VSDT','Malware Result']
df = df[columns]

vsdt = df['File VSDT'].str.replace('[', '').str.replace(']','')
vsdt = vsdt.str.split('_', 1).apply(lambda x: x[1].lower())
vsdt = pd.Series(vsdt)
filename_concate = vsdt + df['FileFullPath']

name_vector = filename_concate.apply(lambda x: string_embedding(x, clip=100))

result = df['Malware Result'].astype('category').cat.codes
newdf = pd.concat([name_vector, result], axis=1, keys=['NameVector', 'Result'])

type_mal = newdf[newdf['Result'] == 1]
type_nor = newdf[newdf['Result'] == 3]
frames = [type_mal, type_nor]
dataframe = pd.concat(frames)


X_train, X_test, y_train, y_test = train_test_split(dataframe['NameVector'], dataframe['Result'], test_size=0.2, random_state=42)

X_train = np.array([i for i in X_train])
X_test = np.array([i for i in X_test])

from keras.utils.np_utils import to_categorical
y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

import theano
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Flatten
from keras.optimizers import SGD
from keras.layers.convolutional import Convolution1D
from keras.layers.pooling import MaxPooling1D

model = Sequential()
model.add(Convolution1D(50, 1, border_mode='same',
          input_shape=X_train[0].shape))
model.add(MaxPooling1D())
model.add(Flatten())
model.add(Dense(4))
model.add(Activation('softmax'))
learning_rate = 0.01
learning_decay = 0.01 / 32

sgd = SGD(lr=learning_rate, decay=learning_decay, momentum=0.9, nesterov=True)
model.compile(loss='categorical_crossentropy', optimizer=sgd, metrixs=['accuracy'])
batch_size = 128
epoch = 32

fit_log = model.fit(X_train, y_train, batch_size=batch_size,
                    nb_epoch=epoch, validation_split=0.1)
# fit_log = model.fit(X_train, y_train, batch_size=batch_size,
#                     nb_epoch=epoch, validation_data=(X_test, y_test))

